
#!/bin/bash

# Update system packages
sudo apt update

# Install required dependencies
sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev curl libbz2-dev -y

# Get the latest version of Python 3.9
PYTHON_VERSION=$(curl -s https://www.python.org/downloads/ | grep -o 'Python 3.9.[0-9]*' | head -n 1 | awk '{print $2}')

# Download Python 3.9 source code
curl -O https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz

# Extract the source code
tar -xf Python-$PYTHON_VERSION.tgz

# Navigate to the extracted directory
cd Python-$PYTHON_VERSION

# Configure and build Python
./configure --enable-optimizations
make -j $(nproc)

# Install Python
sudo make altinstall

# Set Python 3.9 as the default version for python and python3 commands
sudo update-alternatives --install /usr/bin/python python /usr/local/bin/python$PYTHON_VERSION 1
sudo update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python$PYTHON_VERSION 1

# Update pip and pip3
sudo python$PYTHON_VERSION -m ensurepip --upgrade
sudo python$PYTHON_VERSION -m pip install --upgrade pip
sudo python$PYTHON_VERSION -m pip install --upgrade setuptools wheel
sudo update-alternatives --install /usr/bin/pip pip /usr/local/bin/pip$PYTHON_VERSION 1
sudo update-alternatives --install /usr/bin/pip3 pip3 /usr/local/bin/pip$PYTHON_VERSION 1

# Cleanup
cd ..
rm -rf Python-$PYTHON_VERSION Python-$PYTHON_VERSION.tgz

echo "Python $PYTHON_VERSION, pip, and pip3 have been updated successfully and set as default!"

# Update Jenkins
sudo service jenkins stop
mv jenkins_date.tar.gz $HOME
cd /usr/share/jenkins
sudo mv jenkins.war jenkins.war.old
sudo wget https://updates.jenkins-ci.org/latest/jenkins.war
sudo chown root:root jenkins.war
sudo service jenkins start
cat /var/lib/jenkins/config.xml | grep '<version>'
sudo usermod -aG docker jenkins
sudo usermod -a -G root jenkins

# Ansible update  
ansible --version
sudo pip install 'ansible==6.6.0'
pip3 install dnacentersdk==2.5.5
ansible-galaxy collection list
ansible-galaxy collection install cisco.dnac:6.6.4 --force

# Install Git Clone
sudo apt-get install gitclone
sudo pip install github-clone

# Clone the repo
cd ~
ghclone https://github.com/kebaldwi/DNAC-TEMPLATES/tree/master/LABS/LAB-I-Rest-API-Orchestration/dnac
ghclone https://github.com/kebaldwi/DEVWKS-2176

# Setting Permissions for Jenkins
sudo chmod -R 777 /root/


chmod +x update_python.sh
./update_python.sh


History: 

pipeline {
    agent any

    stages {
        stage('Monitor Template Directory') {
            steps {
                script {
                    def previousModifiedTime = null
                    def currentModifiedTime = null

                    while (true) {
                        // Retrieve the previous modified time from a file or environment variable
                        def storedModifiedTime = readFile('/root/DEVWKS-2176/timestamp/previous_modified_time.txt').trim()
                        if (storedModifiedTime) {
                            previousModifiedTime = storedModifiedTime.toLong()
                        }

                        // Check if any files exist in the subdirectory except placeholder.txt
                        def filesExist = sh(script: 'find /root/DEVWKS-2176/templates -type f ! -name "placeholder.txt" | wc -l', returnStdout: true).trim().toInteger() > 0

                        if (filesExist) {
                            // Execute a shell command to retrieve the last modified timestamp of any files except placeholder.txt
                            def lastModifiedOutput = sh(script: 'find /root/DEVWKS-2176/templates -type f ! -name "placeholder.txt" -exec stat -c %Y {} \\; | sort -n | tail -n 1', returnStdout: true).trim()
                            currentModifiedTime = lastModifiedOutput.toLong()
                            println "${currentModifiedTime}"

                            if (previousModifiedTime == null || currentModifiedTime != previousModifiedTime) {
                                // Execute your desired steps or stages here
                                sh 'python3 /root/DEVWKS-2176/deploy_templates.py'
                                //println 'Files changed'
                            } else {
                                println 'No changes'
                            }
                        } else {
                            println 'No files found in the subdirectory'
                        }

                        // Store the current modified time for future comparisons
                        writeFile file: '/root/DEVWKS-2176/timestamp/previous_modified_time.txt', text: currentModifiedTime.toString()
                        sleep 180
                    }
                }
            }
        }
    }
}


Final:

pipeline {
    agent any

    stages {
        stage('Monitor Template Directory') {
            steps {
                script {
                    def previousModifiedTime = null
                    def currentModifiedTime = null

                    while (true) {
                        // Retrieve the previous modified time from a file or environment variable
                        def storedModifiedTime = readFile('/root/DEVWKS-2176/timestamp/previous_modified_time.txt').trim()
                        if (storedModifiedTime) {
                            previousModifiedTime = storedModifiedTime.toLong()
                        }

                        // Check if any files exist in the subdirectory except placeholder.txt
                        def filesExist = sh(script: 'find /root/DEVWKS-2176/templates -type f ! -name "placeholder.txt" | wc -l', returnStdout: true).trim().toInteger() > 0

                        if (filesExist) {
                            // Execute a shell command to retrieve the last modified timestamp of any files except placeholder.txt
                            def lastModifiedOutput = sh(script: 'find /root/DEVWKS-2176/templates -type f ! -name "placeholder.txt" -exec stat -c %Y {} \\; | sort -n | tail -n 1', returnStdout: true).trim()
                            currentModifiedTime = lastModifiedOutput.toLong()
                            println "${currentModifiedTime}"

                            if (previousModifiedTime == null || currentModifiedTime != previousModifiedTime) {
                                // Execute your desired steps or stages here
                                dir('/root/DEVWKS-2176') {
                                    sh 'python3 /root/DEVWKS-2176/deploy_templates.py'
                                }
                                println 'Files changed'
                            } else {
                                println 'No changes'
                            }
                        } else {
                            println 'No files found in the subdirectory'
                        }

                        // Store the current modified time for future comparisons
                        writeFile file: '/root/DEVWKS-2176/timestamp/previous_modified_time.txt', text: currentModifiedTime.toString()
                        sleep 180
                    }
                }
            }
        }
    }
}



To force upgrade Python to version 3.9.4 on Ubuntu, you can follow these steps:

1. Update the package index and upgrade any existing packages:

   ```shell
   sudo apt update
   sudo apt upgrade
   ```

2. Install Python 3.9.4:

   ```shell
   sudo apt install python3.9
   ```

3. Verify the installation by running the following command:

   ```shell
   python3.9 --version
   ```

   This should output `Python 3.9.4`.

To force upgrade all installed pip and pip3 packages, you can use the following commands:

```shell
sudo -H pip3 install --upgrade pip
sudo -H pip3 freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 sudo -H pip3 install -U
```

This will upgrade both `pip` and `pip3` to the latest version and then upgrade all installed packages to their latest versions.

Note that forcing an upgrade of all installed packages may cause compatibility issues with your existing code, so it's recommended to test your code thoroughly after upgrading.

I hope this helps!

To set Python 3.9.5 as the default version for `python3` on Ubuntu, you can use the `update-alternatives` command. Here's how you can do it:

1. First, check the available Python alternatives on your system by running the following command:

   ```shell
   update-alternatives --list python3
   ```

   This will display a list of available Python alternatives along with their paths.

2. To set Python 3.9.5 as the default version, use the `update-alternatives` command with the `--set` option. Replace `/path/to/python3.9.5` with the actual path to your Python 3.9.5 executable:

   ```shell
   sudo update-alternatives --set python3 /path/to/python3.9.5
   ```

   This will set Python 3.9.5 as the default version for `python3`.

After running these commands, you can verify the default Python version by running `python3 --version`. It should display `Python 3.9.5`.

Please note that modifying the default Python version may have implications for other system components or applications that rely on specific Python versions. Make sure to test your code and applications thoroughly after making this change.

If you encounter any issues or need further assistance, please let me know!

alias python3='/usr/bin/python3.9'
alias python='/usr/bin/python3.9'


sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 2
sudo update-alternatives --config python3


missing nano install

sudo apt-get install nano

install nano on scriptserver and save

pip install -r requirements.txt



to remove pip 3 
sudo apt purge python3-pip  
sudo rm -rf '/usr/lib/python3/dist-packages/pip'  
sudo apt install python3-pip   
cd
cd .local/lib/python3/site-packages
sudo rm -rf pip*  
cd
cd .local/lib/python3.5/site-packages
sudo rm -rf pip*  
python3 -m pip install xlwt

sudo apt-get remove python3-pip
sudo apt-get install python3-pip


apt-get --reinstall install python-apt
apt-get --reinstall install apt-transport-https
apt-get install build-essential libssl-dev libffi-dev python-dev

----------------- fixes above


PyGithub==2.1.1
github==1.2.7
and others on paper

sudo apt-get update
sudo apt-get -y upgrade

sudo apt-get install build-essential checkinstall libffi-dev python-dev
sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev


// https://pip.pypa.io/en/stable/installing/#installing-with-get-pip-py
// https://pip.pypa.io/en/stable/installing/#using-linux-package-managers

-------------------- fixes
pip3 install os
pip3 install sys
pip3 install logging
pip3 install time
pip3 install datetime
pip3 install json
pip3 install PyYaml
pip3 install csv
pip3 install requests
pip3 install urllib3
pip3 install base64
pip3 install github
pip3 install PyGithub
pip3 install pprint
pip3 install pathlib import Path  # used for relative path to "templates_jenkins" folder
pip3 install dnacentersdk import DNACenterAPI




pip uninstall PyGithub
pip install PyGithub


