{
	"info": {
		"_postman_id": "765ef2a9-6c33-4153-8aab-7a1e7f4bf036",
		"name": "Catalyst Center - Wired Automation Design",
		"description": "This is the instructors collection to set up the dCLOUD environment for the DevNet Express Class. This collection will set up the following hierarchy.\n\nGlobal > CATC Template Labs > Building > Floor 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13375428",
		"_collection_link": "https://dark-capsule-39992.postman.co/workspace/test~88bf3684-eb9e-4a6e-b042-e4fa374f5a24/collection/13375428-765ef2a9-6c33-4153-8aab-7a1e7f4bf036?action=share&source=collection_link&creator=13375428"
	},
	"item": [
		{
			"name": "CATC Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"if (jsonData.Token) {\r",
							"    pm.test(\"Token acquired\",() => {pm.expect(pm.response.text()).to.include(\"Token\");});\r",
							"    pm.environment.set(\"TOKEN\", jsonData[\"Token\"]); \r",
							"}\r",
							"else {\r",
							"    pm.test(\"Token not acquired\",() => {pm.expect(pm.response.text()).to.include(\"Token\");});\r",
							"    pm.execution.setNextRequest(\"null\");\r",
							"}\r",
							"postman.setNextRequest(\"Create Area\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{CCpwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{CCuser}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{CCip}}/dna/system/api/v1/auth/token",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"system",
						"api",
						"v1",
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Area",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"setTimeout(function(){}, [25000]);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"    pm.test(\"Area created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"    if ( !(pm.environment.get(\"HierarchyFloor\")) ){\r",
							"        pm.execution.setNextRequest(\"null\");\r",
							"    }\r",
							"    else if ( (pm.environment.get(\"HierarchyFloor\")) ){\r",
							"        pm.execution.setNextRequest(\"Create Building\");\r",
							"    }\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Area not created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"    pm.execution.setNextRequest(\"null\");\r",
							"}\r",
							"\r",
							"postman.setNextRequest(\"Create Building\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let HierarchyParent = pm.environment.get(\"HierarchyParent\");\r",
							"let HierarchyArea = pm.environment.get(\"HierarchyArea\");\r",
							"let Counter = 0\r",
							"postman.setEnvironmentVariable(\"FLAG\", Counter);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"area\",\r\n    \"site\": {\r\n        \"area\": {\r\n            \"name\": \"{{HierarchyArea}}\",\r\n            \"parentName\": \"{{HierarchyParent}}\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Building",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"setTimeout(function(){}, [25000]);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  pm.test(\"Building created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"else {\r",
							"  pm.test(\"Building not created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"  pm.execution.setNextRequest(\"null\");\r",
							"}\r",
							"pm.execution.setNextRequest(\"Create Floor\")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let HierarchyParent = pm.environment.get(\"HierarchyParent\");\r",
							"let HierarchyArea = pm.environment.get(\"HierarchyArea\");\r",
							"let HierarchyBldg = pm.environment.get(\"HierarchyBldg\");\r",
							"let HierarchyBldgAddress = pm.environment.get(\"HierarchyBldgAddress\");\r",
							"let BldgLongitude = pm.environment.get(\"BldgLongitude\");\r",
							"let BldgLatitude = pm.environment.get(\"BldgLatitude\");\r",
							"let BldgAddressCountry = pm.environment.get(\"BldgAddressCountry\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"building\",\r\n    \"site\": {\r\n        \"building\": {\r\n            \"name\": \"{{HierarchyBldg}}\",\r\n            \"address\": \"{{HierarchyBldgAddress}}\",\r\n            \"parentName\": \"{{HierarchyParent}}/{{HierarchyArea}}\",\r\n            \"latitude\": \"{{BldgLatitude}}\",\r\n            \"longitude\": \"{{BldgLongitude}}\",\r\n            \"country\": \"{{BldgAddressCountry}}\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"setTimeout(function(){}, [25000]);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"    pm.test(\"Floor created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Floor not created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"    pm.execution.setNextRequest(\"null\");\r",
							"}\r",
							"pm.execution.setNextRequest(\"Get Global SiteID\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let HierarchyParent = pm.environment.get(\"HierarchyParent\");\r",
							"let HierarchyArea = pm.environment.get(\"HierarchyArea\");\r",
							"let HierarchyBldg = pm.environment.get(\"HierarchyBldg\");\r",
							"let HierarchyFloor = pm.environment.get(\"HierarchyFloor\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"floor\",\r\n    \"site\": {\r\n        \"floor\": {\r\n            \"name\": \"{{HierarchyFloor}}\",\r\n            \"parentName\": \"{{HierarchyParent}}/{{HierarchyArea}}/{{HierarchyBldg}}\",\r\n            \"rfModel\": \"Cubes And Walled Offices\",\r\n            \"width\": \"100\",\r\n            \"length\": \"100\",\r\n            \"height\": \"10\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Global SiteID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"for (var i = 0;i<jsonData.response.length;i++) {\r",
							"if (jsonData.response[i].name == pm.environment.get(\"HierarchyParent\")) {\r",
							"pm.environment.set(\"GlobalSiteId\", jsonData[\"response\"][i][\"id\"]);\r",
							"pm.test(\"Global Site Id acquired\", function () {pm.expect(true).to.be.true;}) \r",
							"}\r",
							"else if (jsonData.response[i].name == pm.environment.get(\"HierarchyArea\")) {\r",
							"pm.environment.set(\"AreaSiteId\", jsonData[\"response\"][i][\"id\"]);\r",
							"pm.test(\"Area Site Id acquired\", function () {pm.expect(true).to.be.true;}) \r",
							"}\r",
							"else if (jsonData.response[i].name == pm.environment.get(\"HierarchyBldg\")) {\r",
							"pm.environment.set(\"BuildingSiteId\", jsonData[\"response\"][i][\"id\"]); \r",
							"pm.test(\"Building Site Id acquired\", function () {pm.expect(true).to.be.true;}) \r",
							"} \r",
							"else if (jsonData.response[i].name == pm.environment.get(\"HierarchyFloor\")) {\r",
							"pm.environment.set(\"FloorSiteId\", jsonData[\"response\"][i][\"id\"]);\r",
							"pm.test(\"Floor Site Id acquired\", function () {pm.expect(true).to.be.true;}) \r",
							"}\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"pm.execution.setNextRequest(\"Create Settings\")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  pm.test(\"Global settings created\", function () {pm.expect(true).to.be.true;})\r",
							"}\r",
							"else {\r",
							"  pm.test(\"Global settings not created\", function () {pm.expect(false).to.be.false;})\r",
							"  pm.execution.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [15000]);\r",
							"pm.execution.setNextRequest(\"Create Credentials\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"domainName\");\r",
							"pm.environment.get(\"dnsServer1\");\r",
							"pm.environment.get(\"dnsServer2\");\r",
							"pm.environment.get(\"dhcpServer\");\r",
							"pm.environment.get(\"syslogServer\");\r",
							"pm.environment.get(\"syslogBoolean\");\r",
							"pm.environment.get(\"netflowServer\");\r",
							"pm.environment.get(\"netflowPort\");\r",
							"pm.environment.get(\"netflowBoolean\");\r",
							"pm.environment.get(\"ntpServer\");\r",
							"pm.environment.get(\"timeZone\");\r",
							"pm.environment.get(\"aaaEndpointServer\");\r",
							"pm.environment.get(\"aaaEndpointIpAddress\");\r",
							"pm.environment.get(\"aaaEndpointProtocol\");\r",
							"pm.environment.get(\"aaaEndpointSharedSecret\");\r",
							"pm.environment.get(\"bannerMessage\");\r",
							"pm.environment.get(\"bannerBoolean\");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"settings\": {\r\n        \"dhcpServer\": [\r\n            \"{{dhcpServer}}\"\r\n        ],\r\n        \"dnsServer\": {\r\n            \"domainName\": \"{{domainName}}\",\r\n            \"primaryIpAddress\": \"{{dnsServer1}}\"\r\n        },\r\n           \"syslogServer\": {\r\n            \"ipAddresses\": [\r\n                \"{{syslogServer}}\"\r\n            ],\r\n            \"configureDnacIP\": {{syslogBoolean}}\r\n        },\r\n        \"snmpServer\": {\r\n            \"ipAddresses\": [\r\n                \"{{snmpServer}}\"\r\n            ],\r\n            \"configureDnacIP\": {{snmpBoolean}}\r\n        },\r\n        \"netflowcollector\": {\r\n            \"ipAddress\": \"{{netflowServer}}\",\r\n            \"port\": {{netflowPort}},\r\n            \"configureDnacIP\": {{netflowBoolean}}\r\n        },\r\n        \"ntpServer\": [\r\n            \"{{ntpServer}}\"\r\n        ],\r\n        \"timezone\": \"{{timeZone}}\",\r\n        \"messageOfTheday\": {\r\n            \"bannerMessage\": \"{{bannerMessage}}\",\r\n            \"retainExistingBanner\": \"{{bannerBoolean}}\"\r\n\t\t},\r\n\t\t\"clientAndEndpoint_aaa\": {\r\n\t\t    \"servers\": \"{{aaaEndpointServer}}\",\r\n\t\t    \"ipAddress\": \"{{aaaEndpointIpAddress}}\",\r\n\t\t    \"network\": \"{{aaaEndpointIpAddress}}\",\r\n\t\t    \"protocol\": \"{{aaaEndpointProtocol}}\",\r\n            \"sharedSecret\": \"{{aaaEndpointSharedSecret}}\"\r\n\t\t}    \r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/network/{{GlobalSiteId}}",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"network",
						"{{GlobalSiteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  pm.test(\"Credentials created\", function () {pm.expect(true).to.be.true;})\r",
							"}\r",
							"else {\r",
							"  pm.test(\"Credentials not created\", function () {pm.expect(true).to.be.false;})\r",
							"  pm.execution.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"pm.execution.setNextRequest(\"Create Netconf Credential\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"DcloudUser\");\r",
							"pm.environment.get(\"DcloudPwd\");\r",
							"pm.environment.get(\"DcloudSnmpRO\");\r",
							"pm.environment.get(\"DcloudSnmpRO-Desc\");\r",
							"pm.environment.get(\"DcloudSnmpRW\");\r",
							"pm.environment.get(\"DcloudSnmpRW-Desc\");\r",
							"pm.environment.get(\"DcloudNetconf\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"settings\": {\r\n        \"cliCredential\": [\r\n            {\r\n                \"description\": \"{{DcloudUser}}\",\r\n                \"username\": \"{{DcloudUser}}\",\r\n                \"password\": \"{{DcloudPwd}}\",\r\n                \"enablePassword\": \"{{DcloudPwd}}\"\r\n            }\r\n        ],\r\n        \"snmpV2cRead\": [\r\n            {\r\n                \"description\": \"{{DcloudSnmpRO-Desc}}\",\r\n                \"readCommunity\": \"{{DcloudSnmpRO}}\"\r\n            }\r\n        ],\r\n        \"snmpV2cWrite\": [\r\n            {\r\n                \"description\": \"{{DcloudSnmpRW-Desc}}\",\r\n                \"writeCommunity\": \"{{DcloudSnmpRW}}\"\r\n            }\r\n        ]\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/device-credential",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"device-credential"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Netconf Credential",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"if ((jsonData.executionId) && (jsonData.response.include(\"taskId\"))) {\r",
							"  pm.test(\"NETCONF Credential created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"}\r",
							"else {\r",
							"  pm.test(\"NETCONF Credential created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"  pm.execution.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"pm.execution.setNextRequest(\"Get Credentials\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"DcloudUser\");\r",
							"pm.environment.get(\"DcloudPwd\");\r",
							"pm.environment.get(\"DcloudSnmpRO\");\r",
							"pm.environment.get(\"DcloudSnmpRO-Desc\");\r",
							"pm.environment.get(\"DcloudSnmpRW\");\r",
							"pm.environment.get(\"DcloudSnmpRW-Desc\");\r",
							"pm.environment.get(\"DcloudNetconf\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"description\": \"NETCONF\",\r\n        \"netconfPort\": \"{{DcloudNetconf}}\"\r\n    }\r\n]"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/global-credential/netconf",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"global-credential",
						"netconf"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"for (var i = 0;i<jsonData.snmp_v2_read.length;i++) {\r",
							"if (jsonData.snmp_v2_read[i].description == pm.environment.get(\"DcloudSnmpRO-Desc\")) {\r",
							"  pm.environment.set(\"GlobalCredentialSnmpRO\", jsonData[\"snmp_v2_read\"][i][\"id\"]);\r",
							"  pm.test(\"SNMP RO credentials acquired\", function () {pm.expect(true).to.be.true;});\r",
							"}\r",
							"}\r",
							"for (var i = 0;i<jsonData.snmp_v2_write.length;i++) {\r",
							"if (jsonData.snmp_v2_write[i].description == pm.environment.get(\"DcloudSnmpRW-Desc\")) {\r",
							"  pm.environment.set(\"GlobalCredentialSnmpRW\", jsonData[\"snmp_v2_write\"][i][\"id\"]);\r",
							"  pm.test(\"SNMP RW credentials acquired\", function () {pm.expect(true).to.be.true;});\r",
							"}\r",
							"}\r",
							"for (var i = 0;i<jsonData.cli.length;i++) {\r",
							"if (jsonData.cli[i].username == pm.environment.get(\"DcloudUser\")) {\r",
							"  pm.environment.set(\"GlobalCredentialCli\", jsonData[\"cli\"][i][\"id\"]);\r",
							"  pm.test(\"CLI credentials acquired\", function () {pm.expect(true).to.be.true;});\r",
							"}\r",
							"}\r",
							"setTimeout(function(){}, [15000]);\r",
							"pm.execution.setNextRequest(\"Assign Credentials\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/device-credential",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"device-credential"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assign Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {",
							"  pm.test(\"Credentials assigned\", function () {pm.expect(true).to.be.true;});",
							"}",
							"else {",
							"  pm.test(\"Credentials not assigned\", function () {pm.expect(true).to.be.false;});",
							"  pm.execution.setNextRequest(\"null\");",
							"}",
							"setTimeout(function(){}, [25000]);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"GlobalCredentialCli\");\r",
							"pm.environment.get(\"GlobalCredentialSnmpRO\");\r",
							"pm.environment.get(\"GlobalCredentialSnmpRW\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cliId\": \"{{GlobalCredentialCli}}\",\r\n    \"snmpV2ReadId\": \"{{GlobalCredentialSnmpRO}}\",\r\n    \"snmpV2WriteId\": \"{{GlobalCredentialSnmpRW}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{CCip}}/dna/intent/api/v1/credential-to-site/{{GlobalSiteId}}",
					"protocol": "https",
					"host": [
						"{{CCip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"credential-to-site",
						"{{GlobalSiteId}}"
					]
				}
			},
			"response": []
		}
	]
}