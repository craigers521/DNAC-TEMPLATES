{
	"info": {
		"_postman_id": "b5796060-4ccd-46e8-9de7-94aecacda8a4",
		"name": "DNA Center LAB 10 - Build LAB Environment",
		"description": "This is the instructors collection to set up the dCLOUD environment for the DevNet Express Class. This collection will set up the following hierarchy.\n\nGlobal > DNAC Template Labs > Building > Floor 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13375428"
	},
	"item": [
		{
			"name": "DNAC Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if (jsonData.Token) {\r",
							"  tests[\"Body has Token\"] = true;\r",
							"  postman.setEnvironmentVariable(\"TOKEN\", jsonData[\"Token\"]); \r",
							"}\r",
							"else {\r",
							"  tests[\"Body has no Token\"] = false;\r",
							"  postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [5000]);\r",
							"postman.setNextRequest(\"Create Area\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{DNACpwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{DNACuser}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/system/api/v1/auth/token",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"system",
						"api",
						"v1",
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Area",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  tests[\"Area has been created\"] = true;\r",
							"  tests[\"This first call takes a minute and a half\"] = true;\r",
							"}\r",
							"else {\r",
							"  tests[\"Area has not been created\"] = false;\r",
							"  postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [90000]);\r",
							"postman.setNextRequest(\"Create Building\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"HierarchyParent\");\r",
							"pm.environment.get(\"HierarchyArea\");\r",
							"let Counter = 0\r",
							"postman.setEnvironmentVariable(\"FLAG\", Counter);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"area\",\r\n    \"site\": {\r\n        \"area\": {\r\n            \"name\": \"{{HierarchyArea}}\",\r\n            \"parentName\": \"{{HierarchyParent}}\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Building",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  tests[\"Building has been created\"] = true;\r",
							"}\r",
							"else {\r",
							"  tests[\"Building has not been created\"] = false;\r",
							"  postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"postman.setNextRequest(\"Create Floor\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"HierarchyParent\");\r",
							"pm.environment.get(\"HierarchyArea\");\r",
							"pm.environment.get(\"HierarchyBldg\");\r",
							"pm.environment.get(\"HierarchyBldgAddress\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"building\",\r\n    \"site\": {\r\n        \"building\": {\r\n            \"name\": \"{{HierarchyBldg}}\",\r\n            \"address\": \"{{HierarchyBldgAddress}}\",\r\n            \"parentName\": \"{{HierarchyParent}}/{{HierarchyArea}}\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  tests[\"Floor has been created\"] = true;\r",
							"}\r",
							"else {\r",
							"  tests[\"Floor has not been created\"] = false;\r",
							"  postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"postman.setNextRequest(\"Get Global SiteID\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"HierarchyParent\");\r",
							"pm.environment.get(\"HierarchyArea\");\r",
							"pm.environment.get(\"HierarchyBldg\");\r",
							"pm.environment.get(\"HierarchyBldgAddress\");\r",
							"pm.environment.get(\"HierarchyFloor\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"floor\",\r\n    \"site\": {\r\n        \"floor\": {\r\n            \"name\": \"{{HierarchyFloor}}\",\r\n            \"parentName\": \"{{HierarchyParent}}/{{HierarchyArea}}/{{HierarchyBldg}}\",\r\n            \"rfModel\": \"Cubes And Walled Offices\",\r\n            \"width\": \"100\",\r\n            \"length\": \"100\",\r\n            \"height\": \"10\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Global SiteID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"for (var i = 0;i<jsonData.response.length;i++) {\r",
							"if (jsonData.response[i].name == pm.environment.get(\"HierarchyParent\")) {\r",
							"postman.setEnvironmentVariable(\"GlobalSiteId\", jsonData[\"response\"][i][\"id\"]);\r",
							"tests[\"Global Site Id acquired\"] = true; \r",
							"}\r",
							"else if (jsonData.response[i].name == pm.environment.get(\"HierarchyArea\")) {\r",
							"postman.setEnvironmentVariable(\"AreaSiteId\", jsonData[\"response\"][i][\"id\"]); \r",
							"tests[\"Area Site Id acquired\"] = true; \r",
							"}\r",
							"else if (jsonData.response[i].name == pm.environment.get(\"HierarchyBldg\")) {\r",
							"postman.setEnvironmentVariable(\"BuildingSiteId\", jsonData[\"response\"][i][\"id\"]); \r",
							"tests[\"Building Site Id acquired\"] = true; \r",
							"} \r",
							"else if (jsonData.response[i].name == pm.environment.get(\"HierarchyFloor\")) {\r",
							"postman.setEnvironmentVariable(\"FloorSiteId\", jsonData[\"response\"][i][\"id\"]);\r",
							"tests[\"Floor Site Id acquired\"] = true; \r",
							"}\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"postman.setNextRequest(\"Create Settings\")\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"strictSSL": false
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  tests[\"Global settings created\"] = true;\r",
							"}\r",
							"else {\r",
							"  tests[\"Global settings not created\"] = false;\r",
							"  postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [15000]);\r",
							"postman.setNextRequest(\"Create Credentials\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"domainName\");\r",
							"pm.environment.get(\"dnsServer1\");\r",
							"pm.environment.get(\"dnsServer2\");\r",
							"pm.environment.get(\"dhcpServer\");\r",
							"pm.environment.get(\"syslogServer\");\r",
							"pm.environment.get(\"syslogBoolean\");\r",
							"pm.environment.get(\"netflowServer\");\r",
							"pm.environment.get(\"netflowPort\");\r",
							"pm.environment.get(\"netflowBoolean\");\r",
							"pm.environment.get(\"ntpServer\");\r",
							"pm.environment.get(\"timeZone\");\r",
							"pm.environment.get(\"aaaEndpointServer\");\r",
							"pm.environment.get(\"aaaEndpointIpAddress\");\r",
							"pm.environment.get(\"aaaEndpointProtocol\");\r",
							"pm.environment.get(\"aaaEndpointSharedSecret\");\r",
							"pm.environment.get(\"bannerMessage\");\r",
							"pm.environment.get(\"bannerBoolean\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"settings\": {\r\n        \"dhcpServer\": [\r\n            \"{{dhcpServer}}\"\r\n        ],\r\n        \"dnsServer\": {\r\n            \"domainName\": \"{{domainName}}\",\r\n            \"primaryIpAddress\": \"{{dnsServer1}}\"\r\n        },\r\n           \"syslogServer\": {\r\n            \"ipAddresses\": [\r\n                \"{{syslogServer}}\"\r\n            ],\r\n            \"configureDnacIP\": {{syslogBoolean}}\r\n        },\r\n        \"snmpServer\": {\r\n            \"ipAddresses\": [\r\n                \"{{snmpServer}}\"\r\n            ],\r\n            \"configureDnacIP\": {{snmpBoolean}}\r\n        },\r\n        \"netflowcollector\": {\r\n            \"ipAddress\": \"{{netflowServer}}\",\r\n            \"port\": {{netflowPort}},\r\n            \"configureDnacIP\": {{netflowBoolean}}\r\n        },\r\n        \"ntpServer\": [\r\n            \"{{ntpServer}}\"\r\n        ],\r\n        \"timezone\": \"{{timeZone}}\",\r\n        \"messageOfTheday\": {\r\n            \"bannerMessage\": \"{{bannerMessage}}\",\r\n            \"retainExistingBanner\": \"{{bannerBoolean}}\"\r\n\t\t},\r\n\t\t\"clientAndEndpoint_aaa\": {\r\n\t\t    \"servers\": \"{{aaaEndpointServer}}\",\r\n\t\t    \"ipAddress\": \"{{aaaEndpointIpAddress}}\",\r\n\t\t    \"network\": \"{{aaaEndpointIpAddress}}\",\r\n\t\t    \"protocol\": \"{{aaaEndpointProtocol}}\",\r\n            \"sharedSecret\": \"{{aaaEndpointSharedSecret}}\"\r\n\t\t}    \r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/network/{{GlobalSiteId}}",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"network",
						"{{GlobalSiteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  tests[\"Credentials created\"] = true;\r",
							"}\r",
							"else {\r",
							"  tests[\"Credentials not created\"] = false;\r",
							"  postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"postman.setNextRequest(\"Get Credentials\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"DcloudUser\");\r",
							"pm.environment.get(\"DcloudPwd\");\r",
							"pm.environment.get(\"DcloudSnmpRO\");\r",
							"pm.environment.get(\"DcloudSnmpRO-Desc\");\r",
							"pm.environment.get(\"DcloudSnmpRW\");\r",
							"pm.environment.get(\"DcloudSnmpRW-Desc\");\r",
							"pm.environment.get(\"DcloudNetconf\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"settings\": {\r\n        \"cliCredential\": [\r\n            {\r\n                \"description\": \"{{DcloudUser}}\",\r\n                \"username\": \"{{DcloudUser}}\",\r\n                \"password\": \"{{DcloudPwd}}\",\r\n                \"enablePassword\": \"{{DcloudPwd}}\"\r\n            }\r\n        ],\r\n        \"snmpV2cRead\": [\r\n            {\r\n                \"description\": \"{{DcloudSnmpRO-Desc}}\",\r\n                \"readCommunity\": \"{{DcloudSnmpRO}}\"\r\n            }\r\n        ],\r\n        \"snmpV2cWrite\": [\r\n            {\r\n                \"description\": \"{{DcloudSnmpRW-Desc}}\",\r\n                \"writeCommunity\": \"{{DcloudSnmpRW}}\"\r\n            }\r\n        ]\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/device-credential",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"device-credential"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"for (var i = 0;i<jsonData.snmp_v2_read.length;i++) {\r",
							"if (jsonData.snmp_v2_read[i].description == pm.environment.get(\"DcloudSnmpRO-Desc\")) {\r",
							"  postman.setEnvironmentVariable(\"GlobalCredentialSnmpRO\", jsonData[\"snmp_v2_read\"][i][\"id\"]);\r",
							"  tests[\"SNMP RO credentials acquired\"] = true;\r",
							"}\r",
							"}\r",
							"for (var i = 0;i<jsonData.snmp_v2_write.length;i++) {\r",
							"if (jsonData.snmp_v2_write[i].description == pm.environment.get(\"DcloudSnmpRW-Desc\")) {\r",
							"  postman.setEnvironmentVariable(\"GlobalCredentialSnmpRW\", jsonData[\"snmp_v2_write\"][i][\"id\"]);\r",
							"  tests[\"SNMP RW credentials acquired\"] = true;\r",
							"}\r",
							"}\r",
							"for (var i = 0;i<jsonData.cli.length;i++) {\r",
							"if (jsonData.cli[i].username == pm.environment.get(\"DcloudUser\")) {\r",
							"  postman.setEnvironmentVariable(\"GlobalCredentialCli\", jsonData[\"cli\"][i][\"id\"]);\r",
							"  tests[\"CLI credentials acquired\"] = true;\r",
							"}\r",
							"}\r",
							"setTimeout(function(){}, [15000]);\r",
							"postman.setNextRequest(\"Assign Credentials\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/device-credential",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"device-credential"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assign Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {",
							"  tests[\"Credentials assigned\"] = true;",
							"}",
							"else {",
							"  tests[\"Credentials not assigned\"] = false;",
							"  postman.setNextRequest(\"null\");",
							"}",
							"setTimeout(function(){}, [25000]);",
							"postman.setNextRequest(\"Get Global Credentials CLI\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"GlobalCredentialCli\");\r",
							"pm.environment.get(\"GlobalCredentialSnmpRO\");\r",
							"pm.environment.get(\"GlobalCredentialSnmpRW\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cliId\": \"{{GlobalCredentialCli}}\",\r\n    \"snmpV2ReadId\": \"{{GlobalCredentialSnmpRO}}\",\r\n    \"snmpV2WriteId\": \"{{GlobalCredentialSnmpRW}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/credential-to-site/{{GlobalSiteId}}",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"credential-to-site",
						"{{GlobalSiteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Global Credentials CLI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"for (var i = 0;i<jsonData.response.length;i++) {\r",
							"if (jsonData.response[i].username == pm.environment.get(\"DcloudUser\")) {\r",
							"  postman.setEnvironmentVariable(\"GlobalCredentialCli\", jsonData[\"response\"][i][\"id\"]);\r",
							"  tests[\"CLI credentials acquired\"] = true;\r",
							"}\r",
							"}\r",
							"setTimeout(function(){}, [5000]);\r",
							"postman.setNextRequest(\"Get Global Credentials SNMP RO\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/global-credential?credentialSubType=CLI",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"global-credential"
					],
					"query": [
						{
							"key": "credentialSubType",
							"value": "CLI",
							"description": "CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Global Credentials SNMP RO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"for (var i = 0;i<jsonData.response.length;i++) {\r",
							"if (jsonData.response[i].description == pm.environment.get(\"DcloudSnmpRO-Desc\")) {\r",
							"  postman.setEnvironmentVariable(\"GlobalCredentialSnmpRO\", jsonData[\"response\"][i][\"id\"]);\r",
							"  tests[\"SNMP RO credentials acquired\"] = true;\r",
							"}\r",
							"}\r",
							"setTimeout(function(){}, [5000]);\r",
							"postman.setNextRequest(\"Get Global Credentials SNMP RW\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/global-credential?credentialSubType=SNMPV2_READ_COMMUNITY",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"global-credential"
					],
					"query": [
						{
							"key": "credentialSubType",
							"value": "SNMPV2_READ_COMMUNITY",
							"description": "CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Global Credentials SNMP RW",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"for (var i = 0;i<jsonData.response.length;i++) {\r",
							"if (jsonData.response[i].description == pm.environment.get(\"DcloudSnmpRW-Desc\")) {\r",
							"  postman.setEnvironmentVariable(\"GlobalCredentialSnmpRW\", jsonData[\"response\"][i][\"id\"]);\r",
							"  tests[\"SNMP RW credentials acquired\"] = true;\r",
							"}\r",
							"}\r",
							"setTimeout(function(){}, [5000]);\r",
							"postman.setNextRequest(\"Get Global Credentials NETCONF\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/global-credential?credentialSubType=SNMPV2_WRITE_COMMUNITY",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"global-credential"
					],
					"query": [
						{
							"key": "credentialSubType",
							"value": "SNMPV2_WRITE_COMMUNITY",
							"description": "CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Global Credentials NETCONF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"for (var i = 0;i<jsonData.response.length;i++) {\r",
							"if (jsonData.response[i].netconfPort == pm.environment.get(\"DcloudNetconf\")) {\r",
							"  postman.setEnvironmentVariable(\"GlobalCredentialNetconf\", jsonData[\"response\"][i][\"id\"]);\r",
							"  tests[\"NetConf credentials acquired\"] = true;\r",
							"}\r",
							"}\r",
							"pm.environment.set(\"FLAG\", \"0\");\r",
							"setTimeout(function(){}, [5000]);\r",
							"postman.setNextRequest(\"Create Discovery\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/global-credential?credentialSubType=NETCONF",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"global-credential"
					],
					"query": [
						{
							"key": "credentialSubType",
							"value": "NETCONF",
							"description": "CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Discovery",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"GlobalCredentialCli\");\r",
							"pm.environment.get(\"GlobalCredentialSnmpRO\");\r",
							"pm.environment.get(\"GlobalCredentialSnmpRW\");\r",
							"pm.environment.get(\"GlobalCredentialNetconf\");\r",
							"var d = pm.environment.get(\"DeviceList\");\r",
							"var a = pm.environment.get(\"HierarchyArea\");\r",
							"var b = pm.environment.get(\"HierarchyBldg\");\r",
							"var f = pm.environment.get(\"HierarchyFloor\");\r",
							"var s = \"/\";\r",
							"var ds = d.split(\",\");\r",
							"var DeviceString = \"\";\r",
							"var name = a + s + b + s + f;\r",
							"var name = name.replace(/\\s/g, '');\r",
							"var dt1 = \"Range\";\r",
							"var dt2 = \"Multi Range\";\r",
							"pm.environment.set(\"DiscoveryName\", name)\r",
							"if (ds.length > 1){\r",
							"    pm.environment.set(\"DiscoveryType\", dt2);\r",
							"    for (var i = 0;i<ds.length;i++) {\r",
							"        if (i === 0){\r",
							"            DeviceString = DeviceString + ds[i] + \"-\" + ds[i];\r",
							"        }\r",
							"        else{\r",
							"            DeviceString = DeviceString + \",\" + ds[i] + \"-\" + ds[i];\r",
							"        }\r",
							"    }\r",
							"}\r",
							"else{\r",
							"    pm.environment.set(\"DiscoveryType\", dt1);\r",
							"    DeviceString = DeviceString + d + \"-\" + d;\r",
							"}\r",
							"pm.environment.set(\"DeviceRange\", (DeviceString));\r",
							"pm.environment.get(\"DeviceRange\");\r",
							"pm.environment.get(\"DiscoveryType\");\r",
							"pm.environment.get(\"DiscoveryName\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if (jsonData.response.taskId) {\r",
							"    pm.test(\"Discovery created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"    pm.environment.set(\"DiscoveryTaskId\", jsonData[\"response\"][\"taskId\"]);\r",
							"    setTimeout(function(){}, [240000]);\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Discovery created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"postman.setNextRequest(\"Get Discovery From Task\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{DiscoveryName}}\",\r\n    \"discoveryType\": \"{{DiscoveryType}}\",\r\n    \"ipAddressList\": \"{{DeviceRange}}\",\r\n    \"protocolOrder\": \"ssh\",\r\n    \"timeout\": 5,\r\n    \"retry\": 3,\r\n    \"globalCredentialIdList\": [\r\n        \"{{GlobalCredentialCli}}\",\r\n        \"{{GlobalCredentialSnmpRO}}\",\r\n        \"{{GlobalCredentialSnmpRW}}\",\r\n        \"{{GlobalCredentialNetconf}}\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/discovery",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"discovery"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Discovery From Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if (jsonData.response.progress) {\r",
							"    pm.test(\"Discovery Id acquired\",() => {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
							"    pm.environment.set(\"DiscoveryId\", jsonData[\"response\"][\"progress\"]); \r",
							"}\r",
							"else {\r",
							"    pm.test(\"Discovery Id not acquired\",() => {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [60000]);\r",
							"postman.setNextRequest(\"Get Discovery Devices\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/task/{{DiscoveryTaskId}}",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"task",
						"{{DiscoveryTaskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Discovery Devices",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var DeviceIP = \"\";\r",
							"pm.environment.unset(\"DeviceIP\");\r",
							"for (var i = 0;i<jsonData.response.length;i++) {\r",
							"    if (i === 0){\r",
							"        if (jsonData.response[i].managementIpAddress) {\r",
							"            pm.test(\"Device IP acquired\",() => {pm.expect(pm.response.text()).to.include(\"managementIpAddress\");});\r",
							"            DeviceIP = DeviceIP + (jsonData.response[i].managementIpAddress);\r",
							"        }\r",
							"        else {\r",
							"            pm.test(\"Device IP not acquired\",() => {pm.expect(pm.response.text()).to.include(\"managementIpAddress\");});\r",
							"            postman.setNextRequest(\"null\");\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"    else {\r",
							"        if (jsonData.response[i].managementIpAddress) {\r",
							"            pm.test(\"Device IP acquired\",() => {pm.expect(pm.response.text()).to.include(\"managementIpAddress\");});\r",
							"            DeviceIP = DeviceIP + \",\" + (jsonData.response[i].managementIpAddress);\r",
							"        }\r",
							"        else {\r",
							"            pm.test(\"Device IP not acquired\",() => {pm.expect(pm.response.text()).to.include(\"managementIpAddress\");});\r",
							"            postman.setNextRequest(\"null\");\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"}\r",
							"pm.environment.set(\"DeviceIP\", DeviceIP);\r",
							"setTimeout(function(){}, [1000]);\r",
							"postman.setNextRequest(\"Get SiteIDs\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/discovery/{{DiscoveryId}}/network-device",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"discovery",
						"{{DiscoveryId}}",
						"network-device"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get SiteIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var s = \"/\";",
							"var p = pm.environment.get(\"HierarchyParent\");",
							"var a = pm.environment.get(\"HierarchyArea\");",
							"var b = pm.environment.get(\"HierarchyBldg\");",
							"var f = pm.environment.get(\"HierarchyFloor\");",
							"var parent = p;",
							"var area = p + s + a;",
							"var bldg = p + s + a + s + b;",
							"var floor = p + s + a + s + b + s + f;",
							"for (var i = 0;i<jsonData.response.length;i++) {",
							"  if (jsonData.response[i].siteNameHierarchy === floor) {",
							"    pm.environment.set(\"FloorSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"    pm.environment.set(\"TargetSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"    pm.test(\"Floor Site Id acquired\",() => {pm.expect(pm.response.text()).to.include(pm.environment.get(\"HierarchyFloor\"));});",
							"  }",
							"  else if (jsonData.response[i].siteNameHierarchy === bldg) {",
							"    pm.environment.set(\"BuildingSiteId\", jsonData[\"response\"][i][\"id\"]); ",
							"    pm.test(\"Bldg Site Id acquired\",() => {pm.expect(pm.response.text()).to.include(pm.environment.get(\"HierarchyBldg\"));});",
							"  } ",
							"  else if (jsonData.response[i].siteNameHierarchy === area) {",
							"    pm.environment.set(\"AreaSiteId\", jsonData[\"response\"][i][\"id\"]); ",
							"    pm.test(\"Area Site Id acquired\",() => {pm.expect(pm.response.text()).to.include(pm.environment.get(\"HierarchyArea\"));});",
							"  }",
							"  else if (jsonData.response[i].siteNameHierarchy === parent) {",
							"    pm.environment.set(\"GlobalSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"    pm.test(\"Global Site Id acquired\",() => {pm.expect(pm.response.text()).to.include(pm.environment.get(\"HierarchyParent\"));});",
							"  }",
							"}",
							"setTimeout(function(){}, [25000]);",
							"postman.setNextRequest(\"Add Discovered Devices to Site\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Discovered Devices to Site",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var ip = pm.environment.get(\"DeviceIP\");\r",
							"var ip = ip.split(\",\");\r",
							"for (var i = 0;i<ip.length;i++) {\r",
							"    if ( i===0 ) {\r",
							"        Devices = '{ \"ip\": \"' + ip[i] + '\" }';\r",
							"    }\r",
							"    else {\r",
							"        Devices = Devices + ',' + '{ \"ip\": \"' + ip[i] + '\" }';\r",
							"    }\r",
							"}\r",
							"pm.environment.set(\"Devices\", Devices);\r",
							"pm.environment.get(\"Devices\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"    pm.test(\"Devices assigned\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"    postman.setNextRequest(\"Import Project\");\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Devices not assigned\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"device\": [ {{Devices}} ] }"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/system/api/v1/site/{{TargetSiteId}}/device",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"system",
						"api",
						"v1",
						"site",
						"{{TargetSiteId}}",
						"device"
					]
				}
			},
			"response": []
		},
		{
			"name": "Import Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"setTimeout(function(){}, [1000]);\r",
							"if (jsonData.response.taskId) {\r",
							"    pm.test(\"Project created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"    pm.environment.set(\"ProjectTaskId\", jsonData.response.taskId);\r",
							"    postman.setNextRequest(\"Get Project Details\");\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Project not created\",() => {pm.expect(pm.response.text()).to.include(\"taskId\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"SetupProject\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{SetupProject}}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/template-programmer/project/importprojects",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"template-programmer",
						"project",
						"importprojects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Project Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"let ProjectName = pm.environment.get(\"SetupProjectName\");",
							"let TemplateString = pm.environment.get(\"SetupTemplateString\");",
							"let SearchString = TemplateString.split(\",\");",
							"for (var s = 0;s<SearchString.length;s++){",
							"    for (var i = 0;i<jsonData.response[0].templates.length;i++) {",
							"        if (jsonData.response[0].templates[i].name === SearchString[s]){",
							"            pm.test(\"Template \"+SearchString[s]+\" acquired\",() => {pm.expect(pm.response.text()).to.include(SearchString[s]);});",
							"            pm.environment.set(SearchString[s], jsonData.response[0].templates[i].id);",
							"            break; ",
							"        }",
							"    }",
							"}",
							"setTimeout(function(){}, [1000]);",
							"postman.setNextRequest(\"Get Device Id\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v2/template-programmer/project?name={{SetupProjectName}}",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v2",
						"template-programmer",
						"project"
					],
					"query": [
						{
							"key": "id",
							"value": "null",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{SetupProjectName}}"
						},
						{
							"key": "offset",
							"value": "null",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "null",
							"disabled": true
						},
						{
							"key": "sortOrder",
							"value": "null",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Device Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var DeviceList = pm.environment.get(\"DeviceList\");",
							"var DeviceList = DeviceList.split(\",\");",
							"var DeviceId = \"\";",
							"var DeviceIp = \"\";",
							"var FLAG = DeviceList.length;",
							"pm.environment.set(\"FLAG\", FLAG);",
							"for (var i = 0; i < jsonData.response.length; i++) {",
							"    for (var dl = 0; dl < DeviceList.length; dl++) {",
							"        if (jsonData[\"response\"][i][\"managementIpAddress\"] === DeviceList[dl]){",
							"            if (i === 0){",
							"                DeviceId = jsonData[\"response\"][i][\"id\"];",
							"                DeviceIp = jsonData[\"response\"][i][\"managementIpAddress\"];",
							"            }",
							"            else {",
							"                DeviceId = DeviceId + \",\" + jsonData[\"response\"][i][\"id\"];",
							"                DeviceIp = DeviceIp + \",\" + jsonData[\"response\"][i][\"managementIpAddress\"];",
							"            }",
							"        }",
							"    }",
							"}",
							"pm.environment.set(\"DeviceId\", DeviceId);",
							"pm.environment.set(\"DeviceIp\", DeviceIp);",
							"pm.test(\"Devices acquired\",() => {pm.expect(pm.response.text()).to.include(\"response\");});",
							"postman.setNextRequest(\"Deploy Templates\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"FLAG\", 0);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://198.18.129.100/api/v1/network-device",
					"protocol": "https",
					"host": [
						"198",
						"18",
						"129",
						"100"
					],
					"path": [
						"api",
						"v1",
						"network-device"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deploy Templates",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"DeviceIp\");\r",
							"var i = pm.environment.get(\"DeviceIp\");\r",
							"var i = i.split(\",\");\r",
							"var c = i.length;\r",
							"if (c > 1){\r",
							"    var FLAG = pm.environment.get(\"FLAG\");\r",
							"    FLAG = FLAG - 1;\r",
							"    pm.environment.set(\"TargetDeviceId\", i[FLAG]);\r",
							"    if (i[FLAG] === \"198.19.1.2\"){\r",
							"        pm.environment.set(\"TemplateId\", pm.environment.get(\"CAT-C9300-1-Setup\"));\r",
							"    }\r",
							"    else if (i[FLAG] === \"198.19.2.2\"){\r",
							"        pm.environment.set(\"TemplateId\", pm.environment.get(\"CAT-C9300-2-Setup\"));\r",
							"    }\r",
							"    else{\r",
							"        pm.environment.set(\"TemplateId\", pm.environment.get(\"ISR-4331-Setup\"));\r",
							"    }\r",
							"}\r",
							"else{\r",
							"    pm.environment.set(\"TargetDeviceId\", pm.environment.get(\"DeviceIp\"));\r",
							"}\r",
							"pm.environment.get(\"TargetDeviceId\");\r",
							"pm.environment.get(\"TemplateId\");\r",
							"pm.environment.set(\"FLAG\", FLAG);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.test(\"Template deployed\",() => {pm.expect(pm.response.text()).to.include(\"nt Id:\");});\r",
							"var FLAG = pm.environment.get(\"FLAG\");\r",
							"if (FLAG > 0){\r",
							"    postman.setNextRequest(\"Deploy Templates\");\r",
							"}\r",
							"else{\r",
							"    postman.setNextRequest(\"null\");\r",
							"} \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"forcePushTemplate\": false,\r\n    \"isComposite\": false,\r\n    \"targetInfo\": [\r\n        {\r\n            \"id\": \"{{TargetDeviceId}}\",\r\n            \"type\": \"MANAGED_DEVICE_IP\"\r\n        }\r\n    ],\r\n    \"templateId\": \"{{TemplateId}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/template-programmer/template/deploy",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"template-programmer",
						"template",
						"deploy"
					]
				}
			},
			"response": []
		}
	]
}